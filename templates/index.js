// DO NOT EDIT THIS FILE. GENERATED WITH scripts/build_templates.js
exports.coffeescript = `{{#if_ne getKeyword "interface"}}class {{getFullName}}{{#if getExtends}} extends {{#with getExtends}}{{getFullName}}{{/with}}{{/if}}
{{#each getFields}}
  {{this.getName}}: undefined
{{/each}}
{{#each getMethods}}
  {{this.getName}}: {{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{/if}} ->
{{/each}}{{/if_ne}}
`;
exports.csharp = `{{getKeyword}} {{getFullName}}{{#if getExtends}} : {{#with getExtends}}{{getFullName}}{{/with}}{{/if}} {
{{#each getFields}}
  private {{this.getReturnType}} {{this.getName}};
{{/each}}
{{#each getMethods}}
  public {{this.getReturnType}} {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{this.getReturnType}} {{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{else}}(){{/if}} {
    {{#if this.needsReturnStatement}}
      return null;
    {{/if}}
  }
{{/each}}
}
`;
exports.ecmascript5 = `{{#if_ne getKeyword "interface"}}
{{#if getExtends}}
  function {{getFullName}}() {
    {{#with getExtends}}{{getFullName}}{{/with}}.prototype.constructor.apply(this, arguments);
  }
  {{getFullName}}.prototype = Object.create({{#with getExtends}}{{getFullName}}{{/with}}.prototype);
  {{getFullName}}.prototype.constructor = {{getFullName}};
{{else}}
  function {{getFullName}}() {}
{{/if}}
{{#each getFields}}
  {{#call ../this ../getFullName}}{{/call}}.prototype.{{getName}} = undefined;
{{/each}}
{{#each getMethods}}
  {{#call ../this ../getFullName}}{{/call}}.prototype.{{getName}} = function ({{#if getParameters}}{{#each getParameters}}{{#if @first}}{{else}},{{/if}}{{#if getName}}{{getName}}{{else}}param{{@index}}{{/if}}{{/each}}{{/if}}) {};
{{/each}}
{{/if_ne}}
`;
exports.ecmascript6 = `{{#if_ne getKeyword "interface"}}class {{getFullName}}{{#if getExtends}} extends {{#with getExtends}}{{getFullName}}{{/with}}{{/if}} {
{{#if getExtends}}
 {{#if hasFields}}
  constructor: function () {
    super().apply(this, arguments);
   {{#each getFields}}
    this.{{getName}} = undefined;
   {{/each}}
  }{{#if hasMethods}},{{/if}}
 {{/if}}
{{else}}
 {{#if hasFields}}
  constructor: function () {
   {{#each getFields}}
    this.{{getName}} = undefined;
   {{/each}}
  }{{#if hasMethods}},{{/if}}
 {{/if}}
{{/if}}
{{#each getMethods}}
  {{getName}}: function ({{#if getParameters}}{{#each getParameters}}{{#if @first}}{{else}},{{/if}}{{#if getName}}{{getName}}{{else}}param{{@index}}{{/if}}{{/each}}{{/if}}) {}{{#if @last}}{{else}},{{/if}}
{{/each}}
}{{/if_ne}}
`;
exports.java = `{{getKeyword}} {{getFullName}}{{#if getExtends}} extends {{#with getExtends}}{{getFullName}}{{/with}}{{/if}} {
{{#each getFields}}
  private {{this.getReturnType}} {{this.getName}};
{{/each}}
{{#each getMethods}}
  public {{this.getReturnType}} {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{this.getReturnType}} {{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{else}}(){{/if}} {
    {{#if this.needsReturnStatement}}
      return null;
    {{/if}}
  }
{{/each}}
}
`;
exports.php = `<?php
{{getKeyword}} {{getFullName}}{{#if getExtends}} extends {{#with getExtends}}{{getFullName}}{{/with}}{{/if}} {
{{#each getFields}}
  private {{this.getName}};
{{/each}}
{{#each getMethods}}
  public function {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{#if this.getName}}\${{this.getName}}{{else}}\$param{{@index}}{{/if}}{{/each}}){{else}}(){{/if}} {
    {{#if this.needsReturnStatement}}
      return null;
    {{/if}}
  }
{{/each}}
}
?>
`;
exports.python = `class {{getFullName}}{{#if getExtends}}({{#with getExtends}}{{getFullName}}{{/with}}){{/if}}:
    def __init__(self):
{{#each getFields}}
        self.{{this.getName}} = None;
{{/each}}
        pass;
{{#each getMethods}}
    def {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{else}}(){{/if}}:
        pass;
{{/each}}

`;
exports.ruby = `{{#if_ne getKeyword "interface"}}class {{getFullName}}{{#if getExtends}} < {{#with getExtends}}{{getFullName}}{{/with}}{{/if}}
{{#each getFields}}
  @{{this.getName}}
{{/each}}
{{#each getMethods}}
  def {{this.getName}}{{#if this.getParameters}} ({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{/if}}
    return
  end
{{/each}}
end{{/if_ne}}
`;
exports.typescript = `{{getKeyword}} {{getFullName}}{{#if getExtends}} extends {{#with getExtends}}{{getFullName}}{{/with}}{{/if}} {
{{#each getFields}}
  {{#if this.isPublic}}public{{else if this.isPrivate}}private{{else if this.isProtected}}protected{{/if}} {{this.getName}} : {{this.getReturnType}};
{{/each}}
{{#each getMethods}}
  {{#if this.isPublic}}public{{else if this.isPrivate}}private{{else if this.isProtected}}protected{{/if}} {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{else}}(){{/if}} {
    return;
  }
{{/each}}
}
`;
exports.swift = `class {{getFullName}}{{#if getExtends}} : {{#with getExtends}}{{getFullName}}{{/with}}{{/if}} {
{{#each getFields}}
  var {{this.getName}}: {{this.getReturnType}}?  = nil;
{{/each}}
{{#each getMethods}}
  func {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{#if this.getName}}{{this.getName}}:{{this.getReturnType}}{{else}}param{{@index}}: Any{{/if}}{{/each}}){{else}}(){{/if}}{{#if_ne2 this "void"}} -> {{this.getReturnType}}{{/if_ne2}}{
    {{#if_ne2 this "void"}} return {{this.getReturnType}}(){{/if_ne2}}
  }
{{/each}}
}

`;
exports.kotlin = `{{getKeyword}} {{getFullName}}{{#if getExtends}} : {{#with getExtends}}{{getFullName}}{{/with}}(){{/if}} {
{{#each getFields}}
  var {{this.getReturnType}} {{this.getName}}: {{this.getReturnType}}
{{/each}}
{{#each getMethods}}
  public fun {{this.getName}}{{#if this.getParameters}}({{#each this.getParameters}}{{#if @first}}{{else}},{{/if}}{{this.getReturnType}} {{#if this.getName}}{{this.getName}}{{else}}param{{@index}}{{/if}}{{/each}}){{else}}(): {{this.getReturnType}}{{/if}} {
    {{#if this.needsReturnStatement}}
      return null
    {{/if}}
  }
{{/each}}
}
`;
