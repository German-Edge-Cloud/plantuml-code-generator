#!/usr/bin/env node

var util = require("util");
var fs = require("fs");
var hbs = require("handlebars");
var parser = require("./src/plantuml");

var options = {
  language: "coffeescript"
};

var args = process.argv.slice(2); // Trim "node" and the script path.

if (args.length === 0) {
  printUsage();
} else {
  processArguments();
}

function printUsage() {
  util.puts("plantcode inputFile");
}

function isValidLanguage(language) {
  return language === "coffeescript" || language === "typescript";
}

function processArguments() {

  while (args.length > 0 && isOption(args[0])) {
    switch (args[0]) {
      case "-l":
      case "--language":
        nextArg();
        if (args.length === 0) {
          abort("Missing language of the -l/--language option.");
        } else if (!isValidLanguage(args[0])) {
          abort("Invalid language provided.");
        }
        options.language = args[0];
        break;
    }
    nextArg();
  }

  switch (args.length) {
    case 1:
      fs.readFile(args[0], { encoding: "UTF-8" }, function (err, data) {
        if (err === null) {
          processInputFile(data);
        } else {
          util.puts("Unable to read input file.");
        }
      });
    break;
    default:
      abort("No input file provided.");
  }

}

function exitFailure() {
  process.exit(1);
}

function abort(message) {
  util.error(message);
  exitFailure();
}

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

function processInputFile(data) {
  try {
    var aUMLBlocks = parser.parse(data);
  } catch(e) {
    util.puts("Error parsing input file: ", e);
  }
  fs.readFile("templates/" + options.language + ".hbs", { encoding: "UTF-8" }, function (err, data) {
    if (err === null) {
      processTemplateFile(data, aUMLBlocks);
    } else {
      util.puts("Unable to read template file.");
    }
  });
}

function processTemplateFile(templateData, dictionary) {

  var template = hbs.compile(templateData);
  
  var classesToOutput = [];
  
  for (var i = 0, length = dictionary.length; i < length; i++) {
    classesToOutput = classesToOutput.concat(dictionary[i].getClasses());
  }
  
  for (var i = 0, length = classesToOutput.length; i < length; i++) {
    util.puts(template(classesToOutput[i]))
  }
  
}