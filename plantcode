#!/usr/bin/env node

var fs = require("fs");
var hbs = require("handlebars");
var parser = require("./src/plantuml");
var index = require("./src/plantcode");
var templates = require("./templates/index");
var os = require("os");

var options = {
  language: "typescript",
  output: null
};

var supported_languages = index.getSupportedLanguages();

var args = process.argv.slice(2); // Trim "node" and the script path.

if (args.length === 0) {
  printUsage();
} else {
  index.convertFile(getArguments());
}

function printLanguages() {
  supported_languages.forEach(function (item) {
    console.log(item);
  })
  exitSuccess();
}

function printUsage() {
  console.log("Usage: plantcode [options] <inputFile>");
  console.log("");
  console.log("Generates classfile(s) for the provided PlantUML file specified by <input_file> and writes to standard output.");
  console.log("");
  console.log("Options:");
  console.log("  -l, --language <language>          name of the programming language");
  console.log("                                     which the produced class files")
  console.log("                                     will be written in");
  console.log("  -o, --out <output_path>            the path to output the file(s) to");
  console.log("      --show-languages               displays all the current supported");
  console.log("                                     programming languages for use")
  console.log("                                     for with the language option");
  console.log("  -h, --help                         print help and exit");
  exitSuccess();
}

function isValidLanguage(language) {
  return supported_languages.indexOf(language) !== -1;
}

function getArguments() {

  while (args.length > 0 && isOption(args[0])) {
    switch (args[0]) {
      case "-o":
      case "--out":
        nextArg();
        if (args.length === 0) {
          abort("Missing output directory or file for -o/--out option.");
        }
        options.output = args[0];
        break;
      case "-l":
      case "--language":
        nextArg();
        if (args.length === 0) {
          abort("Missing language of the -l/--language option.");
        } else if (!isValidLanguage(args[0])) {
          abort("Invalid language provided.");
        }
        options.language = args[0];
        break;
      case "--show-languages":
        printLanguages();
        break;
      case "-h":
      case "--help":
        printUsage();
        break;
      default:
        abort("Invalid option " + args[0]);
        break;
    }
    nextArg();
  }

  switch (args.length) {
    case 1:
      options.input = args[0];
    break;
    default:
      abort("No input file provided.");
  }

  return options;

}

function exitFailure() {
  process.exit(1);
}

function exitSuccess() {
  process.exit(0);
}

function abort(message) {
  for (var i = 0, length = arguments.length; i < length; i++) {
    console.error(arguments[i]);
  }
  exitFailure();
}

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

